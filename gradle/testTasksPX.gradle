class TestPX extends Test {
    TestPX() {
        group "auth tests"

        ignoreFailures = false

        minHeapSize = '32m'
        maxHeapSize = '256m'
        maxParallelForks = 20
        forkEvery = 20

        //finalizedBy "allurePushReportPX"
    }
}


def allure_project = null
def targetEnv = System.getenv("CI_ENVIRONMENT_SLUG")
def dynamicEnvUrl = System.getenv("DYNAMIC_ENV_URL")
println "DYNAMIC_ENV_URL = ${dynamicEnvUrl}"
println "CI_ENVIRONMENT_SLUG = ${targetEnv}"
def finalEnv = "dev"
if (targetEnv != null && !targetEnv.isEmpty()) {
    finalEnv = targetEnv
    println "Receive env from CI_ENVIRONMENT_SLUG ${targetEnv}"
} else {
    finalEnv = hasProperty('env') ? env : 'dev'
    println "Receive env from property ${finalEnv}"

}


task proxyTest(type: TestPX) {
    doFirst {
        systemProperty "env", finalEnv
    }
    useJUnitPlatform {
        includeTags "auth"
    }

    task uiTests(type: TestPX) {
        systemProperty "env", finalEnv
        useJUnitPlatform {
            includeTags "ui"
        }
    }
}